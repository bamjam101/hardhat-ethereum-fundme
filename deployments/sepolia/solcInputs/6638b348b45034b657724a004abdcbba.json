{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.8;\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror NotOwner();\r\n\r\ncontract FundMe {\r\n    using PriceConverter for uint256;\r\n\r\n    // immutable and constant type variable declaration saves on gas consumption.\r\n    address public immutable i_owner;\r\n\r\n    uint public constant MINIMUM_USD = 50 * 1e18; // or 50* 10 ** 18\r\n\r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToAmountFunded;\r\n\r\n    // Parameterizing priceFeed as per network configurations, which means the priceFeed will be different for different blockchain networks\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable {\r\n        // payable keyword - this represents that users can send ETH to this contract.\r\n\r\n        // Boundary line for users with at least a threshold amount in there wallet.\r\n        require(\r\n            msg.value.conversionRate(priceFeed) > MINIMUM_USD,\r\n            \"Didn't send enough funds!\"\r\n        ); // 1e18 == 1 * 10 ** 18 == 100000000000000000\r\n        // What is reverting? It undos any action before, and sends remaining gas back. It automatically takes place when require fails.\r\n\r\n        // Maintain list of funders -\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n    // Step 1 - how to send money to our FundMe smart contract through fund() function.\r\n\r\n    function withdraw() public onlyOwner {\r\n        // Lopping the funders array and removing the funds from the map\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = funders[funderIndex];\r\n            addressToAmountFunded[funder] = 0;\r\n        }\r\n\r\n        // Reset the array\r\n        funders = new address[](0);\r\n        // Withdraw the funds in three different way\r\n        // Using payable address type\r\n\r\n        // transfer code -\r\n        // payable(msg.sender).transfer(address(this).balance); // transfer uses 2300 gas and if the transfer fails then it gives an error\r\n\r\n        // send code -\r\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);  // send uses 2300 gas and if the operation fails then a boolean is retured\r\n        // require(sendSuccess, \"Send failed!\");\r\n\r\n        // call code (recommended) -\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed!\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // require based revert when sender is not owner - consumes more gas as all the characters of the error message are stored individually\r\n        // require(msg.sender == i_owner, \"Sender is not owner!\");\r\n\r\n        if (msg.sender != i_owner) revert NotOwner();\r\n        _;\r\n    }\r\n\r\n    // executes when someone sends a transaction with money without calling the fund function, action- redirects to fund function.\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    // executes when someone sends a transaction with money and specifies an unknown function, action- redirects to fund function.\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        // Destructuring price from the interface (response is sequenced and if we lay down the same sequence for desturcting then we get the required data from the interface.\r\n        (, int price, , , ) = priceFeed.latestRoundData();\r\n        // ETH i terms in USD\r\n        // Decimal value returned from interface - 3000.00000000\r\n        // This interface price has to be modified to Wei\r\n        return uint256(price * 1e18); // 1**10 = 10000000000\r\n    }\r\n\r\n    // responsible for converting the ETH value to currency (eg. USD) and vise-versa\r\n    function conversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        // 3000_000000000000000000 = ETH/USD price\r\n        // 1_000000000000000000 ETH\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        // 3000 USD (conversion under the hood)\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}