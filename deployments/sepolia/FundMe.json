{
  "address": "0x601976E59BB9aD9A5b71Faf3DAFf7F78C05d0ee2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4df8dfb82ce0359ba7f4e6a97847a17459debe8aff59c280a4c4d1e7dc6f2e5f",
  "receipt": {
    "to": null,
    "from": "0x2492483BF028307E3D388CE02dCbAA4f10dc26c2",
    "contractAddress": "0x601976E59BB9aD9A5b71Faf3DAFf7F78C05d0ee2",
    "transactionIndex": 69,
    "gasUsed": "813431",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x59c8f813598e26acfb780f17e267fd6a5d95a7ba826205e70dd25a84c128d1f6",
    "transactionHash": "0x4df8dfb82ce0359ba7f4e6a97847a17459debe8aff59c280a4c4d1e7dc6f2e5f",
    "logs": [],
    "blockNumber": 3629471,
    "cumulativeGasUsed": "7374633",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "6638b348b45034b657724a004abdcbba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\nerror NotOwner();\\r\\n\\r\\ncontract FundMe {\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    // immutable and constant type variable declaration saves on gas consumption.\\r\\n    address public immutable i_owner;\\r\\n\\r\\n    uint public constant MINIMUM_USD = 50 * 1e18; // or 50* 10 ** 18\\r\\n\\r\\n    address[] public funders;\\r\\n    mapping(address => uint256) public addressToAmountFunded;\\r\\n\\r\\n    // Parameterizing priceFeed as per network configurations, which means the priceFeed will be different for different blockchain networks\\r\\n    AggregatorV3Interface public priceFeed;\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender;\\r\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        // payable keyword - this represents that users can send ETH to this contract.\\r\\n\\r\\n        // Boundary line for users with at least a threshold amount in there wallet.\\r\\n        require(\\r\\n            msg.value.conversionRate(priceFeed) > MINIMUM_USD,\\r\\n            \\\"Didn't send enough funds!\\\"\\r\\n        ); // 1e18 == 1 * 10 ** 18 == 100000000000000000\\r\\n        // What is reverting? It undos any action before, and sends remaining gas back. It automatically takes place when require fails.\\r\\n\\r\\n        // Maintain list of funders -\\r\\n        funders.push(msg.sender);\\r\\n        addressToAmountFunded[msg.sender] = msg.value;\\r\\n    }\\r\\n\\r\\n    // Step 1 - how to send money to our FundMe smart contract through fund() function.\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        // Lopping the funders array and removing the funds from the map\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n\\r\\n        // Reset the array\\r\\n        funders = new address[](0);\\r\\n        // Withdraw the funds in three different way\\r\\n        // Using payable address type\\r\\n\\r\\n        // transfer code -\\r\\n        // payable(msg.sender).transfer(address(this).balance); // transfer uses 2300 gas and if the transfer fails then it gives an error\\r\\n\\r\\n        // send code -\\r\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);  // send uses 2300 gas and if the operation fails then a boolean is retured\\r\\n        // require(sendSuccess, \\\"Send failed!\\\");\\r\\n\\r\\n        // call code (recommended) -\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed!\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        // require based revert when sender is not owner - consumes more gas as all the characters of the error message are stored individually\\r\\n        // require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\r\\n\\r\\n        if (msg.sender != i_owner) revert NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // executes when someone sends a transaction with money without calling the fund function, action- redirects to fund function.\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    // executes when someone sends a transaction with money and specifies an unknown function, action- redirects to fund function.\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a9ea1559b062a49b752568d4b1510331308bd051f7f8cd52acd1629894c7aa9\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        // Destructuring price from the interface (response is sequenced and if we lay down the same sequence for desturcting then we get the required data from the interface.\\r\\n        (, int price, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH i terms in USD\\r\\n        // Decimal value returned from interface - 3000.00000000\\r\\n        // This interface price has to be modified to Wei\\r\\n        return uint256(price * 1e18); // 1**10 = 10000000000\\r\\n    }\\r\\n\\r\\n    // responsible for converting the ETH value to currency (eg. USD) and vise-versa\\r\\n    function conversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        // 3000_000000000000000000 = ETH/USD price\\r\\n        // 1_000000000000000000 ETH\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\r\\n        // 3000 USD (conversion under the hood)\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6b8fd0922bc8383a306c7cd4b43e04201b0e57ccee6dcb7feb90c710cb50104f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610eb2380380610eb283398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610d5361015f600039600081816102d3015261055e0152610d536000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d1565b005b3480156100b057600080fd5b506100cb60048036038101906100c69190610799565b610511565b6040516100d891906107df565b60405180910390f35b3480156100ed57600080fd5b506100f6610529565b60405161010391906107df565b60405180910390f35b34801561011857600080fd5b50610121610536565b60405161012e9190610859565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055c565b6040516101639190610883565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108ca565b610580565b6040516101a09190610883565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105bf90919063ffffffff16565b11610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610954565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610356576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040157600080828154811061037b5761037a610974565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103f9906109d2565b915050610359565b50600067ffffffffffffffff81111561041d5761041c610a1a565b5b60405190808252806020026020018201604052801561044b5781602001602082028036833780820191505090505b506000908051906020019061046192919061068f565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048890610a7a565b60006040518083038185875af1925050503d80600081146104c5576040519150601f19603f3d011682016040523d82523d6000602084013e6104ca565b606091505b505090508061050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610adb565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105cb836105fb565b90506000670de0b6b3a764000085836105e49190610afb565b6105ee9190610b6c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190610c2a565b505050915050670de0b6b3a7640000816106879190610ca5565b915050919050565b828054828255906000526020600020908101928215610708579160200282015b828111156107075782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106af565b5b5090506107159190610719565b5090565b5b8082111561073257600081600090555060010161071a565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107668261073b565b9050919050565b6107768161075b565b811461078157600080fd5b50565b6000813590506107938161076d565b92915050565b6000602082840312156107af576107ae610736565b5b60006107bd84828501610784565b91505092915050565b6000819050919050565b6107d9816107c6565b82525050565b60006020820190506107f460008301846107d0565b92915050565b6000819050919050565b600061081f61081a6108158461073b565b6107fa565b61073b565b9050919050565b600061083182610804565b9050919050565b600061084382610826565b9050919050565b61085381610838565b82525050565b600060208201905061086e600083018461084a565b92915050565b61087d8161075b565b82525050565b60006020820190506108986000830184610874565b92915050565b6108a7816107c6565b81146108b257600080fd5b50565b6000813590506108c48161089e565b92915050565b6000602082840312156108e0576108df610736565b5b60006108ee848285016108b5565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682066756e64732100000000000000600082015250565b600061093e6019836108f7565b915061094982610908565b602082019050919050565b6000602082019050818103600083015261096d81610931565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109dd826107c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0f57610a0e6109a3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a64600083610a49565b9150610a6f82610a54565b600082019050919050565b6000610a8582610a57565b9150819050919050565b7f43616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610ac5600c836108f7565b9150610ad082610a8f565b602082019050919050565b60006020820190508181036000830152610af481610ab8565b9050919050565b6000610b06826107c6565b9150610b11836107c6565b9250828202610b1f816107c6565b91508282048414831517610b3657610b356109a3565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b77826107c6565b9150610b82836107c6565b925082610b9257610b91610b3d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bbc81610b9d565b8114610bc757600080fd5b50565b600081519050610bd981610bb3565b92915050565b6000819050919050565b610bf281610bdf565b8114610bfd57600080fd5b50565b600081519050610c0f81610be9565b92915050565b600081519050610c248161089e565b92915050565b600080600080600060a08688031215610c4657610c45610736565b5b6000610c5488828901610bca565b9550506020610c6588828901610c00565b9450506040610c7688828901610c15565b9350506060610c8788828901610c15565b9250506080610c9888828901610bca565b9150509295509295909350565b6000610cb082610bdf565b9150610cbb83610bdf565b9250828202610cc981610bdf565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d0157610d006109a3565b5b8282058414831517610d1657610d156109a3565b5b509291505056fea2646970667358221220b4cb851383e9382532cf875399e4ee263b114072ea2e2bc21c819c34bb1c571264736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d1565b005b3480156100b057600080fd5b506100cb60048036038101906100c69190610799565b610511565b6040516100d891906107df565b60405180910390f35b3480156100ed57600080fd5b506100f6610529565b60405161010391906107df565b60405180910390f35b34801561011857600080fd5b50610121610536565b60405161012e9190610859565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055c565b6040516101639190610883565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108ca565b610580565b6040516101a09190610883565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105bf90919063ffffffff16565b11610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610954565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610356576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040157600080828154811061037b5761037a610974565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103f9906109d2565b915050610359565b50600067ffffffffffffffff81111561041d5761041c610a1a565b5b60405190808252806020026020018201604052801561044b5781602001602082028036833780820191505090505b506000908051906020019061046192919061068f565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048890610a7a565b60006040518083038185875af1925050503d80600081146104c5576040519150601f19603f3d011682016040523d82523d6000602084013e6104ca565b606091505b505090508061050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610adb565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105cb836105fb565b90506000670de0b6b3a764000085836105e49190610afb565b6105ee9190610b6c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190610c2a565b505050915050670de0b6b3a7640000816106879190610ca5565b915050919050565b828054828255906000526020600020908101928215610708579160200282015b828111156107075782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106af565b5b5090506107159190610719565b5090565b5b8082111561073257600081600090555060010161071a565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107668261073b565b9050919050565b6107768161075b565b811461078157600080fd5b50565b6000813590506107938161076d565b92915050565b6000602082840312156107af576107ae610736565b5b60006107bd84828501610784565b91505092915050565b6000819050919050565b6107d9816107c6565b82525050565b60006020820190506107f460008301846107d0565b92915050565b6000819050919050565b600061081f61081a6108158461073b565b6107fa565b61073b565b9050919050565b600061083182610804565b9050919050565b600061084382610826565b9050919050565b61085381610838565b82525050565b600060208201905061086e600083018461084a565b92915050565b61087d8161075b565b82525050565b60006020820190506108986000830184610874565b92915050565b6108a7816107c6565b81146108b257600080fd5b50565b6000813590506108c48161089e565b92915050565b6000602082840312156108e0576108df610736565b5b60006108ee848285016108b5565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682066756e64732100000000000000600082015250565b600061093e6019836108f7565b915061094982610908565b602082019050919050565b6000602082019050818103600083015261096d81610931565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109dd826107c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0f57610a0e6109a3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a64600083610a49565b9150610a6f82610a54565b600082019050919050565b6000610a8582610a57565b9150819050919050565b7f43616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610ac5600c836108f7565b9150610ad082610a8f565b602082019050919050565b60006020820190508181036000830152610af481610ab8565b9050919050565b6000610b06826107c6565b9150610b11836107c6565b9250828202610b1f816107c6565b91508282048414831517610b3657610b356109a3565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b77826107c6565b9150610b82836107c6565b925082610b9257610b91610b3d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bbc81610b9d565b8114610bc757600080fd5b50565b600081519050610bd981610bb3565b92915050565b6000819050919050565b610bf281610bdf565b8114610bfd57600080fd5b50565b600081519050610c0f81610be9565b92915050565b600081519050610c248161089e565b92915050565b600080600080600060a08688031215610c4657610c45610736565b5b6000610c5488828901610bca565b9550506020610c6588828901610c00565b9450506040610c7688828901610c15565b9350506060610c8788828901610c15565b9250506080610c9888828901610bca565b9150509295509295909350565b6000610cb082610bdf565b9150610cbb83610bdf565b9250828202610cc981610bdf565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d0157610d006109a3565b5b8282058414831517610d1657610d156109a3565b5b509291505056fea2646970667358221220b4cb851383e9382532cf875399e4ee263b114072ea2e2bc21c819c34bb1c571264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}